So I've been brainstorming how to implement a quest/dialogue system
i really think we should pretty much copy bethesda in how they do it for the skyrim engine (rando fun fact, fallout 4 is the skyrim engine, just a bit updated! At least, thats what they say on the Fallout mod page)

from what i'm understanding so far from it, is were gonna need scripting in our game
i looked into a few ways to add scripting and not entirely sure what the best option is
	Javascript - no idea how javascript works/syntaxs/etc But, theres a project/plugin called UnrealJS - google it, it installs easy but i had no idea how to write/mess with the example JS
	
	SkookumScript - google it, again, theres a plugin on the marketplace. this looks suuuper promising, but suuper powerful. like too powerful. i dont think we need a shotgun creating extra overhang for us (i tried it out and it seems cool, but adds a lot of time to the startup process, and adds an extra window for its own IDE)
	
	ScriptPlugin with lua integration - this seems like the best option, its built in to the unreal engine source, we just have to download lua binaries (or python binaries, i think we could load any script language we want) thing here is connecting it to our own unreal engine classes, so like the JS, no idea where/how to start on that - check out (unreal engine program folder, so C/ProgramFiles/EpicGames/Unrealengine)/ Engine/Plugins/ScriptingGenerator/Lua i think, look around in there for it
	Two was of doing this:
		-theres a ScriptPlugin inside the engine, but you have to
			download and build the engine from source (easy, just takes a while)
			download lua binaries, put into the lua folder, and build the lua.sln (easy, quick build time too)
			rebuild the engine (I cannot get it to rebuild with the script plugin - ugghhh, this woulda been perfect, but i can't find any help on building it)



	
Anyway, scripting is gonna be key because my idea (and how bethesda does it) is this kinda workflow:
		you make an actor to give you a quest
		you give that actor an id - SSTQ_Barry (Space Shooter Test Quest_Barry)
		then you make a quest
		in that quest you set up some dialogue
		hey would you find me my amulet?
		no
			do nothing
		yes
			run script
			
		the script would be: advanceQuestStage() or something like that, but the point is it would be entered in the editor
		
		
	http://www.creationkit.com/index.php?title=Bethesda_Tutorial_Planning_the_Quest
	
	you should check our their quest making tutorial, but while reading, pretend we have the same tools
	
	i think once we have an idea for how we want to "create" our quests, well know what classes we need to make, to make that happen
	
	anyway, this is hard to explain over text, some of the ideas i have so far haha

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
November 1st

Ok, didn't want to delete/modify above, but i went through the creation kit tutorials on making a quest
heres my notes/documentation for it


StartQuest()
EndQuest()
SetStage(id)
SetObjectiveDisplayed(id)
SetObjectiveComplete(id)
SetObjectiveFailed(id)
GetObjectiveComplete(id)
int GetObjectiveDisplayed()
IsObjectiveComplete(int)

QuestData
{
	Name
	ID		- like GSQ001 or something unique
	Type 		- misc/side/deadric quest
	Priority	- this would affect dialogue, and push higher priorty quest dialogue up the list
	Event		- this is the activation event, can be NONE or a specific Event
		if None
			this quest doesn't start up until a script manually calls ID.StartQuest() or ID.SetStage(int)
		if Event
			the story manager adds conditionals and checks in an update/tick function. ideas for this, type it later
			example events:
				increase Level, steal item, pickup item, location change, load level, get arrested, get caught sneaking, kill actor, damage actor, etcetcetc

	Bools
		bGameStart	- if no event specified && this is true, the quest starts at the beginning of the game
		bRunOnce
		bAllowedRepeatStages
	TArray<DialogeConditions>	-comeback to this, unimportant now
}

QuestStage
{

	int Index	-stage 0, stage 10, stage 20, etcetc, bethesda uses increments of 10, so if later you want to add something, like a sub stage, you could add stage 11 or something (i dont quite agree/understand this convention)
	bStartupStage	-this runs on quest start, even if the quest is activated by SetStage() and its setting a stage other than the marked startup stage
	bShutdownStage	-same thing, but on shutdown/finished quest
	QuestStageItems
	{
		LogEntry	-this is the string like "I helped out Lydia find her Dragonborn helmet" aka the quest summary/log entry
		ResultScript	-this has conditionals, and when this stage is activated, it runs those conditionals. if true, run the attached script
					-example would be having a Kill or Protect Character objective, the associated Stage would then run conditionals on whether the player saved/kill the target. 
					then it would set the next stage, and make the appropriate log entry/objective complete
		Conditionals	-a system/struct in of itself, that has a {DataType, Desired Result} so conditoinals can be aactors/locations/etcetcetc
		bComplete	-mark quest as completed if this stage runs
		bFailed		-mark quest as failed if this stage runs
	}
}

Conditionals
{
	Animations
	DialogueSpoken
	AIPackages/Behaviors
	QuestStages
	QuestObjectives
	Quests
	AActors and other UObjects
	FVector and other data types
}


Quest Objectives
{
	Index
	DisplayText
	bORedPrevious	-if true, it combines the previous objective
				-example: Objective(1) = Kill Billy, Objective(2)(bOred=true) = Save Billy
						-result = Kill Billy OR Save Billy
	QuestTarget	-this is the map marker/waypoint that is then set
}

Quest Alias
{
	AliasType	-Reference Alias || Location Alias
	Alias Name / ID
	DisplayName
	Various bools 	-essential,unique,optional,allowed
}
ReferenceAliasType
{
	TemplateActor	- a template of an actor, would then set stuff like (inventory, ai level, etc etc, think bandits or thieves)
	Unique Actor 	- a specific actor	(think lydia or King of Whiterun)
	Specific Ref 	-a specific actor, but hardcoded, couldn't be modified by the Quest/Story Manager (difference is unique actor could have conditionals saying anyone of these uniques are good, where specific is this and only this actor)
	
	Alias Data
		Scripts
		Inventory
		Spells/Weapons
}

Dialogue
{
	Branches
	Topics
	Infos
		lots of explanation here, will update later, dinner time!
}

